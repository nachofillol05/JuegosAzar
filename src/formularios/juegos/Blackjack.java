package formularios.juegos;

import formularios.Usuario.FrmLobby;
import clases.Carta;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.*;

public class Blackjack extends javax.swing.JFrame {
    int totalEnemigo = 0;
    int totalJugador = 0;
    int salvadoJ = 0;
    int salvadoE = 0;
    ArrayList<String> datosTxt = new ArrayList();
    String archivo = "RegistroUsuarios.txt";
    String linea;
    int puntos;
    int partidasJugadas;
    int puntosAll;
    boolean allIn;
    int fichasGanadas;
    boolean jugar = true;
    String audio;
    

    public Blackjack(String lineaAnt) {
        initComponents();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        lblNoFichas.setVisible(false);
        cmbApuesta.removeAllItems();
        cmbApuesta.addItem("1");
        cmbApuesta.addItem("5");
        cmbApuesta.addItem("10");
        cmbApuesta.addItem("50");
        cmbApuesta.addItem("100");
        cmbApuesta.addItem("500");
        cmbApuesta.addItem("1000");
        cmbApuesta.addItem("10000");
        cmbApuesta.addItem("100000");
        cmbApuesta.addItem("1000000");
        cmbApuesta.addItem("All in");
        this.linea = lineaAnt;
        puntos = obtenerPuntos();
        lblPuntitos.setText(puntos + " Fichas");
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                operarPuntos(puntos, obtenerPartidas());
              
                FrmLobby ventanaLobby = new FrmLobby(linea);
                ventanaLobby.setVisible(true);
            }
        });
        replay();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        btnPedir = new javax.swing.JButton();
        btnPasar = new javax.swing.JButton();
        cmbApuesta = new javax.swing.JComboBox<>();
        btnJugar = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();
        lblCatch = new javax.swing.JLabel();
        lblTitulo = new javax.swing.JLabel();
        lblPuntos = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtEnemigo = new javax.swing.JTextArea();
        lblPuntosEnemigo = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtJugador = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        lblNoFichas = new javax.swing.JLabel();
        lblPuntitos = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Juegosesto.png"))); // NOI18N
        jLabel2.setText("jLabel2");

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Juegosesto.png"))); // NOI18N
        jLabel7.setText("jLabel2");

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Juegosesto.png"))); // NOI18N
        jLabel14.setText("jLabel2");

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Juegosesto.png"))); // NOI18N
        jLabel16.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnPedir.setText("Pedir");
        btnPedir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPedirActionPerformed(evt);
            }
        });
        getContentPane().add(btnPedir, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 310, -1, -1));

        btnPasar.setText("Pasar");
        btnPasar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPasarActionPerformed(evt);
            }
        });
        getContentPane().add(btnPasar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 310, -1, -1));

        cmbApuesta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(cmbApuesta, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 340, 110, -1));

        btnJugar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/palancaJugar.jpg"))); // NOI18N
        btnJugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJugarActionPerformed(evt);
            }
        });
        getContentPane().add(btnJugar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 370, 80, 78));

        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });
        getContentPane().add(btnVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 468, -1, -1));
        getContentPane().add(lblCatch, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 291, 214, 18));

        lblTitulo.setText("¡Bienvenido a Blackjack!");
        getContentPane().add(lblTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 6, -1, -1));

        lblPuntos.setText("(Jugador)");
        getContentPane().add(lblPuntos, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 270, 214, -1));

        txtEnemigo.setEditable(false);
        txtEnemigo.setBackground(new java.awt.Color(100, 0, 0));
        txtEnemigo.setColumns(20);
        txtEnemigo.setForeground(new java.awt.Color(255, 255, 255));
        txtEnemigo.setRows(5);
        txtEnemigo.setToolTipText("Contrincante");
        jScrollPane2.setViewportView(txtEnemigo);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 51, -1, -1));

        lblPuntosEnemigo.setText("(Contrincante)");
        getContentPane().add(lblPuntosEnemigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 214, -1));

        txtJugador.setEditable(false);
        txtJugador.setBackground(new java.awt.Color(100, 0, 0));
        txtJugador.setColumns(20);
        txtJugador.setForeground(new java.awt.Color(255, 255, 255));
        txtJugador.setRows(5);
        txtJugador.setToolTipText("Tú");
        jScrollPane3.setViewportView(txtJugador);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 165, -1, -1));

        jLabel1.setText("Fichas");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 340, 37, -1));

        lblNoFichas.setForeground(new java.awt.Color(255, 51, 51));
        lblNoFichas.setText("No te alcanzan las fichas");
        getContentPane().add(lblNoFichas, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 446, -1, -1));

        lblPuntitos.setText("Fichas = 0");
        getContentPane().add(lblPuntitos, new org.netbeans.lib.awtextra.AbsoluteConstraints(103, 28, -1, -1));

        jLabel29.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondoJuegosblack.jpg"))); // NOI18N
        getContentPane().add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 290, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPedirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPedirActionPerformed
        audio = "..\\audio\\Card (online-audio-converter.com).wav";
        try {
            reproducirAudio(audio);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(TragaFichas.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (totalJugador < 21){    
            Carta cartaJugador = drawCard();
            totalJugador = totalJugador + cartaJugador.getValor();
            txtJugador.setText(txtJugador.getText() + " + " + cartaJugador.getEspecial());
            lblPuntos.setText("Total Jugador: " + totalJugador);
            if (cartaJugador.isComodin()){
                salvadoJ = salvadoJ + 1;
            }
            if (totalJugador > 21 && salvadoJ >= 1){
                totalJugador = totalJugador - 10;
                lblPuntos.setText("Total Jugador: " + totalJugador);
                salvadoJ = salvadoJ - 1;
            } else if (totalJugador > 21){
                lblCatch.setText("Na man sos malisimo");
                replay();
            } else if (totalJugador == 21){
                turnoEnemigo();
            }
        } else {
            lblCatch.setText("Na man sos malisimo");
            replay();
        }
    }//GEN-LAST:event_btnPedirActionPerformed

    private void btnPasarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPasarActionPerformed
        turnoEnemigo();
    }//GEN-LAST:event_btnPasarActionPerformed

    private void btnJugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJugarActionPerformed
        if(jugar){
            audio = "..\\audio\\Item_108.wav";
            try {
                reproducirAudio(audio);
            } catch (LineUnavailableException ex) {
                Logger.getLogger(TragaFichas.class.getName()).log(Level.SEVERE, null, ex);
            }
            boolean seguir = false;
            if(cmbApuesta.getSelectedItem().toString().equals("All in")){
                if(obtenerPuntos() != 0){
                    lblNoFichas.setVisible(false);
                    puntosAll = puntos;
                    puntos = 0;
                    allIn = true;
                    seguir = true;
                }else{
                    lblNoFichas.setText("No tenes fichas");
                    lblNoFichas.setVisible(true);
                    seguir = false;
                }
            }else{
                if((puntos - Integer.parseInt(cmbApuesta.getSelectedItem().toString())) >= 0){
                    lblNoFichas.setVisible(false);
                    obtenerPartidas();
                    puntos -= Integer.parseInt(cmbApuesta.getSelectedItem().toString());
                    seguir = true;
                }else{
                    lblNoFichas.setText("No te alcanzan las fichas");
                    lblNoFichas.setVisible(true);
                    seguir = false;
                }
            }
            if(seguir){
                btnJugar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/palancaJugando.jpg")));
                jugar = false;
                partidasJugadas = obtenerPartidas() + 1;
                operarPuntos(puntos, partidasJugadas);
                reset();
                Carta cartaEnemigo = drawCard();
                totalEnemigo = cartaEnemigo.getValor();
                txtEnemigo.setText(cartaEnemigo.getEspecial() + " + ?");
                lblPuntosEnemigo.setText("Total Enemigo: " + totalEnemigo);
                if (cartaEnemigo.isComodin()){
                    salvadoE = salvadoE + 1;
                }
                Carta cartaJugador1 = drawCard();
                Carta cartaJugador2 = drawCard();
                totalJugador = cartaJugador1.getValor() + cartaJugador2.getValor();
                txtJugador.setText(cartaJugador1.getEspecial() + " + " + cartaJugador2.getEspecial());
                lblPuntos.setText("Total Jugador: " + totalJugador);
                if (cartaJugador1.isComodin()){
                    salvadoJ = salvadoJ + 1;
                }
                if (cartaJugador2.isComodin()){
                    salvadoJ = salvadoJ + 1;
                }
                if (totalJugador == 21){
                    turnoEnemigo();
                    replay();
                }
            }
        }
    }//GEN-LAST:event_btnJugarActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        lblPuntos.setText("(Jugador)");
        lblPuntosEnemigo.setText("(Contrincante)");
        FrmLobby ventanaLobby = new FrmLobby(linea);
        ventanaLobby.setVisible(true);
        this.dispose();
        operarPuntos(puntos, obtenerPartidas());
    }//GEN-LAST:event_btnVolverActionPerformed

    private void turnoEnemigo(){
        audio = "..\\audio\\Card (online-audio-converter.com).wav";
        try {
            reproducirAudio(audio);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(TragaFichas.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtEnemigo.setText(totalEnemigo + "");
        Carta cartaEnemigo = drawCard();
        totalEnemigo = totalEnemigo + cartaEnemigo.getValor();
        txtEnemigo.setText(txtEnemigo.getText() + " + " + cartaEnemigo.getEspecial());
        lblPuntosEnemigo.setText("Total Enemigo: " + totalEnemigo);
        if (cartaEnemigo.isComodin()){
            salvadoE = salvadoE + 1;
        }
        while (totalEnemigo < 21 && (totalEnemigo < totalJugador || totalEnemigo == totalJugador)) {
            cartaEnemigo = drawCard();
            totalEnemigo = totalEnemigo + cartaEnemigo.getValor();
            txtEnemigo.setText(txtEnemigo.getText() + " + " + cartaEnemigo.getEspecial());
            lblPuntosEnemigo.setText("Total Enemigo: " + totalEnemigo);
            if (cartaEnemigo.isComodin()){
                salvadoE = salvadoE + 1;
            }
            if (totalEnemigo > 21 && salvadoE >= 1){
            totalEnemigo = totalEnemigo - 10;
            lblPuntosEnemigo.setText("Total Enemigo: " + totalEnemigo);
            salvadoE = salvadoE - 1;
            } 
        } 
        if (totalEnemigo > totalJugador && totalEnemigo <= 21){
            lblCatch.setText("Na man sos malisimo");
        } else if (totalEnemigo == totalJugador && totalEnemigo <= 21){
            lblCatch.setText("¡Empate!");
            if(allIn){
                    puntos = puntosAll;
                }else{
                    fichasGanadas = (int) (Integer.valueOf((String) cmbApuesta.getSelectedItem()));
                    puntos += fichasGanadas;
                }
                operarPuntos(puntos, obtenerPartidas());
        } else {
            if(totalJugador == 21){
                lblCatch.setText("Na man sos ultra buenisimo");
                if(allIn){
                    puntos = puntosAll * 4;
                }else{
                    fichasGanadas = (int) (Integer.valueOf((String) cmbApuesta.getSelectedItem()) * 4);
                    puntos += fichasGanadas;
                }
                operarPuntos(puntos, obtenerPartidas());
            }else{
                lblCatch.setText("Na man sos buenisimo");
                if(allIn){
                    puntos = puntosAll * 2;
                }else{
                    fichasGanadas = (int) (Integer.valueOf((String) cmbApuesta.getSelectedItem()) * 2);
                    puntos += fichasGanadas;
                    
                }
                operarPuntos(puntos, obtenerPartidas());
            }
            
        }
        replay();
    }
    
    private void reset(){
        lblPuntos.setText("");
        lblPuntosEnemigo.setText("");
        txtJugador.setText("");
        txtEnemigo.setText("");
        lblCatch.setText("");
        btnPedir.setEnabled(true);
        btnPasar.setEnabled(true);
        cmbApuesta.setEnabled(false);
        btnVolver.setEnabled(false);
        totalEnemigo = 0;
        totalJugador = 0;
        salvadoJ = 0;
        salvadoE = 0;
    }
    
    private void replay(){
        jugar = true;
        cmbApuesta.setEnabled(true);
        btnVolver.setEnabled(true);
        btnPedir.setEnabled(false);
        btnPasar.setEnabled(false);
        btnJugar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/palancaJugar.jpg")));
    }
    
    private Carta drawCard(){
        boolean comodin = false;
        int valor = (int)(Math.random()*(14-2+1)+2);
        String especial = valor + "";
        if (valor == 11){
            valor = 10;
            especial = "J";
        } else if (valor == 12){
            valor = 10;
            especial = "Q";
        } else if (valor == 13){
            valor = 10;
            especial = "K";
        } else if (valor == 14){
            valor = 11;
            comodin = true;
            especial = "A";
        }
        Carta carta = new Carta(valor,especial,comodin);
        return carta;
    }
    
    /**
     * @param args the command line arguments
     */
    public void operarPuntos(int numero, int partidasJugadas){
            datosTxt = leerArchivo();
            
            String[] lineaSeparada = linea.split(":");
            limpiarArchivo();
            for (int i=0;i<datosTxt.size();i++){
            //acaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa abajo user no entero
                if(datosTxt.get(i).contains(":U")){
                    String[] datosSep = datosTxt.get(i).split(":");
                    
                    if(lineaSeparada[2].equals(datosSep[2])){
                            
                            lineaSeparada[0] = numero + "";
                            if(partidasJugadas != 0){
                                lineaSeparada[1] = partidasJugadas + "";
                            }
                            
                            
                            escribirArchivo((Arrays.toString(lineaSeparada) + "\n").replace("[", "").replace("]","").replace(", ", ":"));
                            

                        }else{
                            escribirArchivo((datosTxt.get(i) + "\n").replace("[", "").replace("]","").replace(", ", ":"));
                        }
            }else{
                    escribirArchivo((datosTxt.get(i) + "\n").replace("[", "").replace("]","").replace(", ", ":"));
                }
        }
            lblPuntitos.setText(numero + " fichas");
    }


   



    
    public ArrayList<String> leerArchivo(){
            ArrayList<String> datos = new ArrayList();
            try {
                BufferedReader leer = new BufferedReader(new FileReader(archivo));
                String lectura = leer.readLine();
                 while(lectura != null){
                 
                    datos.add(lectura);
                    lectura = leer.readLine();
                    
                }
             
            return datos;
            }catch(Exception e){
                
        }
        return null;
        }
    
    
    
    
        public int obtenerPuntos(){
            datosTxt = leerArchivo();
            String[] lineaSeparada = linea.split(":");
            for (int i=0;i<datosTxt.size();i++){
            
                if(datosTxt.get(i).contains(":U")){
                    String[] datosSep = datosTxt.get(i).split(":");
                    if(lineaSeparada[2].equals(datosSep[2])){
                        int fichas =  Integer.parseInt(datosSep[0]);
                        return fichas;
                    }
                }
            }
            return 0;
        }
        
        public int obtenerPartidas(){
            datosTxt = leerArchivo();
            String[] lineaSeparada = linea.split(":");
            for (int i=0;i<datosTxt.size();i++){
            
                if(datosTxt.get(i).contains(":U")){
                    String[] datosSep = datosTxt.get(i).split(":");
                   
                    if(lineaSeparada[2].equals(datosSep[2])){
                        int partidas =  Integer.parseInt(datosSep[1]);
                        return partidas;
                    }
                }
            }
            return 0;
        }
        
        
        public void escribirArchivo(String dato){

            try (FileWriter escritor = new FileWriter(archivo, true)) {
                escritor.append(dato);
            }
         catch (Exception e){
            
        }
        }
    public void limpiarArchivo(){
        File archivo = new File("RegistroUsuarios.txt");
        try {
            FileWriter escritor = new FileWriter(archivo, false);
            escritor.write("");
            
        } catch (Exception ex) {}
        
    }
    
    public void reproducirAudio(String wav) throws LineUnavailableException{
        File file = new File(wav);
        AudioInputStream audioStream = null;
        try {
            audioStream = AudioSystem.getAudioInputStream(file);
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(TragaFichas.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TragaFichas.class.getName()).log(Level.SEVERE, null, ex);
        }
        Clip clip = AudioSystem.getClip();
        try {
            clip.open(audioStream);
        } catch (IOException ex) {
            Logger.getLogger(TragaFichas.class.getName()).log(Level.SEVERE, null, ex);
        }
        clip.start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnJugar;
    private javax.swing.JButton btnPasar;
    private javax.swing.JButton btnPedir;
    private javax.swing.JButton btnVolver;
    private javax.swing.JComboBox<String> cmbApuesta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblCatch;
    private javax.swing.JLabel lblNoFichas;
    private javax.swing.JLabel lblPuntitos;
    private javax.swing.JLabel lblPuntos;
    private javax.swing.JLabel lblPuntosEnemigo;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTextArea txtEnemigo;
    private javax.swing.JTextArea txtJugador;
    // End of variables declaration//GEN-END:variables
}
